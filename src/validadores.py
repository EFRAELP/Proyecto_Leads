"""
validadores.py
Funciones de validaci√≥n y detecci√≥n para normalizaci√≥n de datos
"""

import pandas as pd
from rapidfuzz import fuzz


class Validadores:
    """Validadores para colegios, universidades y respuestas"""
    
    def __init__(self, config, logger):
        """
        Inicializa los validadores
        
        Args:
            config: M√≥dulo de configuraci√≥n con constantes
            logger: Instancia de Logger para registrar mensajes
        """
        self.config = config
        self.logger = logger
    
    def es_sigla_ambigua(self, texto):
        """Detecta siglas ambiguas"""
        if not texto or pd.isna(texto):
            return False
        
        texto_limpio = str(texto).strip().lower()
        
        if len(texto_limpio) <= 3 and texto_limpio not in ['usac', 'url', 'umg', 'ufm', 'uvg']:
            return True
        
        return texto_limpio in self.config.SIGLAS_AMBIGUAS
    
    def detectar_respuesta_invalida(self, texto):
        """Detecta respuestas inv√°lidas"""
        if not texto or pd.isna(texto):
            return True
        
        texto_limpio = str(texto).strip().lower()
        
        if len(texto_limpio) < 2:
            return True
        
        if texto_limpio in self.config.RESPUESTAS_INVALIDAS:
            return True
        
        frases_invalidas = [
            'no estudio', 'no estoy', 'ninguno', 'ya me gradu√©',
            'solo necesito', 'trabajo en', 'certificado en'
        ]
        if any(frase in texto_limpio for frase in frases_invalidas):
            return True
        
        return False
    
    # ‚≠ê NUEVO: Detectar t√≠tulos acad√©micos
    def detectar_titulo_carrera(self, texto):
        """
        Detecta si el texto es un t√≠tulo acad√©mico o carrera, no un colegio
        Retorna True si es un t√≠tulo/carrera que debe marcarse como "Otro"
        """
        if not texto or pd.isna(texto):
            return False
        
        texto_limpio = str(texto).strip().lower()
        
        # Lista de patrones que indican t√≠tulos acad√©micos
        titulos = [
            'perito en', 'perito contador', 'perita en',
            'bachiller en', 'bachillerato en',
            'tecnico en', 't√©cnico en', 'tecnica en', 't√©cnica en',
            'licenciatura en', 'licenciado en', 'licenciada en',
            'maestria en', 'maestr√≠a en', 'master en',
            'ingeniero en', 'ingeniera en', 'ingenieria en', 'ingenier√≠a en',
            'arquitecto', 'arquitecta', 'arquitectura',
            'doctor en', 'doctora en',
            'abogado', 'abogada',
            'contador', 'contadora',
        ]
        
        for titulo in titulos:
            if titulo in texto_limpio:
                return True
        
        return False
    
    def buscar_universidad_conocida(self, texto):
        """
        Busca universidades guatemaltecas
        ‚≠ê MODIFICADO: Verifica PRIMERO si es un colegio espec√≠fico (como Instituto Rafael Land√≠var)
        antes de clasificarlo como universidad
        """
        if not texto or pd.isna(texto):
            return None
        
        texto_limpio = str(texto).strip().lower()
        
        # ‚≠ê PASO 1: Verificar si es un COLEGIO espec√≠fico (antes de verificar universidades)
        # Esto evita que "instituto rafael land√≠var" sea clasificado como "Universidad Rafael Land√≠var"
        if hasattr(self.config, 'COLEGIOS_ESPECIFICOS'):
            for colegio_key, colegio_nombre in self.config.COLEGIOS_ESPECIFICOS.items():
                if colegio_key in texto_limpio:
                    self.logger.log(f"üè´ Colegio espec√≠fico detectado: '{texto}' ‚Üí '{colegio_nombre}'")
                    return colegio_nombre
        
        # ‚≠ê PASO 2: Verificar si es un colegio que NO es universidad
        if texto_limpio in self.config.COLEGIOS_NO_UNIVERSITARIOS:
            self.logger.log(f"‚ö†Ô∏è No es universidad: '{texto}' ‚Üí 'Otro'")
            return None
        
        # PASO 3: Ahora s√≠ buscar universidades (solo si NO es un colegio espec√≠fico)
        if texto_limpio in self.config.UNIVERSIDADES_GT:
            return self.config.UNIVERSIDADES_GT[texto_limpio]
        
        for key, universidad in self.config.UNIVERSIDADES_GT.items():
            if key in texto_limpio or texto_limpio in key:
                return universidad
        
        # PASO 4: Fuzzy matching solo para universidades
        mejor_match = None
        mejor_score = 0
        
        for key, universidad in self.config.UNIVERSIDADES_GT.items():
            score = fuzz.ratio(texto_limpio, key)
            if score > mejor_score and score > 75:
                mejor_score = score
                mejor_match = universidad
        
        return mejor_match
    
    def fuzzy_match(self, texto, categoria, diccionario):
        """
        Fuzzy matching en diccionario
        ‚≠ê MODIFICADO: Umbral aumentado de 85 a 92 para ser m√°s estricto
        """
        if not texto or pd.isna(texto):
            return None
            
        texto_limpio = str(texto).strip().lower()
        diccionario_cat = diccionario.get(categoria, {})
        
        mejor_match = None
        mejor_score = 0
        
        for key in diccionario_cat.keys():
            score = fuzz.ratio(texto_limpio, key.lower())
            if score > mejor_score:
                mejor_score = score
                mejor_match = key
        
        # ‚≠ê CAMBIADO: De 85 a 92 (m√°s estricto)
        if mejor_score > 88:
            return diccionario_cat[mejor_match]
        
        return None
    
    def detectar_no_es_colegio(self, texto):
        """Detecta si NO es un colegio"""
        if not texto or pd.isna(texto):
            return False
        
        texto_limpio = str(texto).strip().lower()
        
        for institucion in self.config.NO_SON_COLEGIOS:
            if institucion in texto_limpio:
                return True
        
        return False

# ============================================================
# ‚≠ê NUEVAS FUNCIONES PARA NORMALIZACI√ìN DE GRADOS ACAD√âMICOS
# ============================================================

def es_valor_basura(texto, config):
    """
    Detecta si un valor es basura/prueba sin sentido
    
    Args:
        texto: Texto a validar
        config: M√≥dulo de configuraci√≥n con PATRONES_BASURA
        
    Returns:
        True si es basura, False si no
    """
    if not texto or pd.isna(texto):
        return False
    
    texto_str = str(texto).strip().lower()
    
    # Verificar si est√° vac√≠o despu√©s de limpiar
    if not texto_str or len(texto_str) < 1:
        return False
    
    # 1. Verificar patrones de basura del config
    for patron in config.PATRONES_BASURA:
        if patron in texto_str:
            return True
    
    # 2. Detectar c√≥digos alfanum√©ricos sin sentido (ABC123, XYZ999)
    import re
    if re.match(r'^[a-z]{2,}[0-9]{2,}$', texto_str):
        return True
    
    # 3. Detectar letras repetidas (aaa, xxx, asdf)
    if len(set(texto_str)) <= 2 and len(texto_str) >= 3:
        return True
    
    # 4. Detectar n√∫meros largos sin sentido (m√°s de 4 d√≠gitos)
    if texto_str.isdigit() and len(texto_str) > 4:
        return True
    
    # 5. Solo s√≠mbolos
    if all(c in '-._ /\\|()[]{}' for c in texto_str):
        return True
    
    return False


def detectar_graduacion_implicita(texto, config):
    """
    Detecta si el texto implica que la persona ya se gradu√≥
    
    Args:
        texto: Texto normalizado (min√∫sculas, sin tildes)
        config: M√≥dulo de configuraci√≥n con KEYWORDS_GRADUADO
        
    Returns:
        True si implica graduaci√≥n, False si no
    """
    if not texto or pd.isna(texto):
        return False
    
    texto_str = str(texto).strip().lower()
    
    # Buscar keywords de graduaci√≥n
    for keyword in config.KEYWORDS_GRADUADO:
        if keyword in texto_str:
            return True
    
    return False


def validar_grado_manual(grado_original, grados_opciones, logger):
    """
    Muestra men√∫ interactivo para clasificar manualmente un grado acad√©mico
    
    Args:
        grado_original: Valor original que no se pudo clasificar
        grados_opciones: Lista de opciones disponibles (de config.GRADOS_OPCIONES)
        logger: Instancia de Logger para registrar la decisi√≥n
        
    Returns:
        El grado normalizado seleccionado por el usuario
    """
    print("\n" + "="*60)
    print(f"‚ö†Ô∏è  NO SE PUDO CLASIFICAR AUTOM√ÅTICAMENTE: '{grado_original}'")
    print("="*60)
    print("\nSelecciona la clasificaci√≥n correcta:\n")
    
    # Mostrar opciones numeradas
    for i, opcion in enumerate(grados_opciones, 1):
        print(f"  {i}. {opcion}")
    
    # Solicitar input del usuario
    while True:
        try:
            respuesta = input(f"\nElige una opci√≥n (1-{len(grados_opciones)}): ").strip()
            
            # Validar que sea un n√∫mero
            opcion_num = int(respuesta)
            
            # Validar que est√© en el rango
            if 1 <= opcion_num <= len(grados_opciones):
                grado_seleccionado = grados_opciones[opcion_num - 1]
                
                # Registrar en log
                logger.log(f"‚úÖ Clasificaci√≥n manual: '{grado_original}' ‚Üí '{grado_seleccionado}'")
                
                print(f"\n‚úÖ Guardado como: {grado_seleccionado}\n")
                return grado_seleccionado
            else:
                print(f"‚ö†Ô∏è  Por favor, ingresa un n√∫mero entre 1 y {len(grados_opciones)}")
                
        except ValueError:
            print("‚ö†Ô∏è  Por favor, ingresa un n√∫mero v√°lido")
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è  Proceso interrumpido por el usuario")
            logger.log(f"‚ö†Ô∏è Clasificaci√≥n manual cancelada para: '{grado_original}'")
            return "Sin especificar"